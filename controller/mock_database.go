// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/sarthakshekhawat/Uptime-Monitoring-Service/controller (interfaces: DatabaseInterface)

// Package controller is a generated GoMock package.
package controller

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
)

// MockDatabaseInterface is a mock of DatabaseInterface interface.
type MockDatabaseInterface struct {
	ctrl     *gomock.Controller
	recorder *MockDatabaseInterfaceMockRecorder
}

// MockDatabaseInterfaceMockRecorder is the mock recorder for MockDatabaseInterface.
type MockDatabaseInterfaceMockRecorder struct {
	mock *MockDatabaseInterface
}

// NewMockDatabaseInterface creates a new mock instance.
func NewMockDatabaseInterface(ctrl *gomock.Controller) *MockDatabaseInterface {
	mock := &MockDatabaseInterface{ctrl: ctrl}
	mock.recorder = &MockDatabaseInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDatabaseInterface) EXPECT() *MockDatabaseInterfaceMockRecorder {
	return m.recorder
}

// addData mocks base method.
func (m *MockDatabaseInterface) addData(arg0 DataBase) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "addData", arg0)
}

// addData indicates an expected call of addData.
func (mr *MockDatabaseInterfaceMockRecorder) addData(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "addData", reflect.TypeOf((*MockDatabaseInterface)(nil).addData), arg0)
}

// deleteData mocks base method.
func (m *MockDatabaseInterface) deleteData(arg0 DataBase) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "deleteData", arg0)
}

// deleteData indicates an expected call of deleteData.
func (mr *MockDatabaseInterfaceMockRecorder) deleteData(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "deleteData", reflect.TypeOf((*MockDatabaseInterface)(nil).deleteData), arg0)
}

// fetchDataWithID mocks base method.
func (m *MockDatabaseInterface) fetchDataWithID(arg0 uuid.UUID) (DataBase, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "fetchDataWithID", arg0)
	ret0, _ := ret[0].(DataBase)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// fetchDataWithID indicates an expected call of fetchDataWithID.
func (mr *MockDatabaseInterfaceMockRecorder) fetchDataWithID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "fetchDataWithID", reflect.TypeOf((*MockDatabaseInterface)(nil).fetchDataWithID), arg0)
}

// updateData mocks base method.
func (m *MockDatabaseInterface) updateData(arg0 DataBase) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "updateData", arg0)
}

// updateData indicates an expected call of updateData.
func (mr *MockDatabaseInterfaceMockRecorder) updateData(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "updateData", reflect.TypeOf((*MockDatabaseInterface)(nil).updateData), arg0)
}
